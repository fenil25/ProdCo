
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



/**
 *
 * @author Lenovo
 */
public class DisplayCustomer extends javax.swing.JFrame {

    private Connection con;
    String customerList;
    /** Creates new form DisplayCustomer */
    public DisplayCustomer() {
        initComponents();
    }
    
    public DisplayCustomer(Connection con) throws SQLException {
        this.con = con;
        initComponents();
        
        try (Statement st = con.createStatement()) {
            String query = "Select * from CUSTOMER;";
            ResultSet rs = st.executeQuery(query);
            DefaultTableModel model = (DefaultTableModel)cTable.getModel();
            model.setRowCount(0);
            customerList = "";
            while(rs.next()){
                String idCustomer = rs.getString("idCustomer");
                String first_name = rs.getString("first_name");
                String last_name = rs.getString("last_name");
                String address = rs.getString("address");
                String phone = rs.getString("phone");
                model.addRow(new Object[]{idCustomer, first_name, last_name, address, phone});
                customerList = customerList + ", " +  idCustomer;
            }
            rs.close();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cTable = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        delentry = new javax.swing.JButton();
        updentry = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();
        filterLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        fnameLabel = new javax.swing.JLabel();
        fnameField = new javax.swing.JTextField();
        lnameLabel = new javax.swing.JLabel();
        lnameField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Address", "Phone no."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cTable);

        delete.setText("DELETE ALL");
        delete.setToolTipText("");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        delentry.setText("Delete Selected Entry");
        delentry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delentryActionPerformed(evt);
            }
        });

        updentry.setText("Update Selected Entry");
        updentry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updentryActionPerformed(evt);
            }
        });

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        filterLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        filterLabel.setText("Filter");
        filterLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        fnameLabel.setText("First Name");

        lnameLabel.setText("Last Name");

        addressLabel.setText("Address");

        phoneLabel.setText("Phone No");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updentry, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delentry, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                            .addComponent(jSeparator1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(fnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(lnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(110, 110, 110))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(phoneField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(phoneLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lnameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lnameLabel))
                                .addGap(40, 40, 40)))
                        .addGap(22, 22, 22)
                        .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fnameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fnameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLabel)
                            .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delentry, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updentry, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try {
            int YesOrNo = JOptionPane.showConfirmDialog(null, "Do You Want to Delete All Customers in the Table?", "Delete Customers", JOptionPane.YES_NO_OPTION);
            if(YesOrNo == 0){
                try {
                    Statement delq = con.createStatement();
                    String query = String.format("DELETE from CUSTOMER WHERE idCustomer IN (" + customerList.substring(2) + ");");
                    System.out.println(query);
                    delq.executeUpdate(query);
                    JFrame f = new JFrame();
                    JOptionPane.showMessageDialog(f, "Deleted Successfully");
                } catch (SQLException ex) {
                    Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                    JFrame f = new JFrame();
                    JOptionPane.showMessageDialog(f, "Something went Wrong. Couldn't Delete.");
                }
            }

            try (Statement newtable = con.createStatement()) {
                String query = "Select * from CUSTOMER;";
                ResultSet rs = newtable.executeQuery(query);
                DefaultTableModel model = (DefaultTableModel)cTable.getModel();
                model.setRowCount(0);
                customerList = "";
                while(rs.next()){
                    String idCustomer = rs.getString("idCustomer");
                    String first_name = rs.getString("first_name");
                    String last_name = rs.getString("last_name");
                    String address = rs.getString("address");
                    String phone = rs.getString("phone");
                    model.addRow(new Object[]{idCustomer, first_name, last_name, address, phone});
                    customerList = customerList + ", " +  idCustomer;
                }
                rs.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void delentryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delentryActionPerformed
        int rowIndex =  cTable.getSelectedRow();
        JFrame f = new JFrame();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(f, "Please Select an Entry To Perform This Operation");
        } else {
            try {
                int YesOrNo = JOptionPane.showConfirmDialog(null, "Do You Want to Delete This Customer?", "Delete Customer", JOptionPane.YES_NO_OPTION);
                if(YesOrNo == 0){
                    try {
                        Statement delq = con.createStatement();
                        int d = Integer.parseInt(cTable.getValueAt(rowIndex, 0).toString());
                        String query = String.format("DELETE from Customer WHERE idCustomer = '" + d + "';");
                        System.out.println(query);
                        delq.executeUpdate(query);
                        JOptionPane.showMessageDialog(f, "Deleted Successfully");
                    } catch (SQLException ex) {
                        Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(f, "Something went Wrong");
                    }
                }

                try (Statement newtable = con.createStatement()) {
                    String query = "Select * from Customer;";
                    ResultSet rs = newtable.executeQuery(query);
                    DefaultTableModel model = (DefaultTableModel)cTable.getModel();
                    model.setRowCount(0);
                    customerList = "";
                    while(rs.next()){
                        String idCustomer = rs.getString("idCustomer");
                        String first_name = rs.getString("first_name");
                        String last_name = rs.getString("last_name");
                        String address = rs.getString("address");
                        String phone = rs.getString("phone");
                        model.addRow(new Object[]{idCustomer, first_name, last_name, address, phone});
                        customerList = customerList + ", " +  idCustomer;
                    }
                    rs.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(f, "Something went wrong while Deleting Entry");
            }
        }
    }//GEN-LAST:event_delentryActionPerformed

    private void updentryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updentryActionPerformed
        // TODO add your handling code here:
        int rowIndex =  cTable.getSelectedRow();
        JFrame f = new JFrame();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(f, "Please Select an Entry To Perform This Operation");
        } else {
            AddCustomer ac;
            try {
                int cid = Integer.parseInt(cTable.getValueAt(rowIndex, 0).toString());
                String fname = cTable.getValueAt(rowIndex, 1).toString();
                String lname = cTable.getValueAt(rowIndex, 2).toString();
                String add = cTable.getValueAt(rowIndex, 3).toString();
                String pno = cTable.getValueAt(rowIndex, 4).toString();
                
                ac = new AddCustomer(con, 1, cid, fname, lname, add, pno);
                ac.setVisible(true);
            } catch (SQLException | ParseException ex) {
                Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(f, "Something Went Wrong");
            }
        }
    }//GEN-LAST:event_updentryActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:
        try {
            String fname = "%"+fnameField.getText()+"%";
            String lname = "%"+lnameField.getText()+"%";
            String add = "%"+addressField.getText()+"%";
            String pno = "%"+phoneField.getText()+"%";
            Statement st = con.createStatement();
            String query = String.format("SELECT * from CUSTOMER WHERE first_name LIKE '%s' AND last_name LIKE '%s' AND "
                    + "address LIKE '%s' AND phone LIKE '%s';", fname, lname, add, pno);
            System.out.println(query);
            ResultSet rs = st.executeQuery(query);
            DefaultTableModel model = (DefaultTableModel)cTable.getModel();
            model.setRowCount(0);
            customerList = "";
            while(rs.next()){
                String idCustomer = rs.getString("idCustomer");
                String first_name = rs.getString("first_name");
                String last_name = rs.getString("last_name");
                String address = rs.getString("address");
                String phone = rs.getString("phone");
                model.addRow(new Object[]{idCustomer, first_name, last_name, address, phone});
                customerList = customerList + ", " +  idCustomer;
            }
            rs.close();
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(DisplayCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "Something went Wrong");
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTable cTable;
    private javax.swing.JButton delentry;
    private javax.swing.JButton delete;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JTextField fnameField;
    private javax.swing.JLabel fnameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lnameField;
    private javax.swing.JLabel lnameLabel;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JButton updentry;
    // End of variables declaration//GEN-END:variables

}
