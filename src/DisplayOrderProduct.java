import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author parth
 */
public class DisplayOrderProduct extends javax.swing.JFrame {
    Connection con;
    int oid;

    /**
     * Creates new form DisplayOrderProduct
     */
    public DisplayOrderProduct() {
        initComponents();
    }
    
    public DisplayOrderProduct(Connection con, int oid) throws SQLException {
        this.oid = oid;
        this.con = con;
        
        System.out.println(con);
        System.out.println(oid);
        initComponents();
        
        stage_field.addItem("ALL");
        stage_field.addItem("Placed");
        stage_field.addItem("In Progress");
        stage_field.addItem("Completed");
        product_field.addItem("ALL");
        AutoCompletion.enable(stage_field);
        
        DefaultTableModel model = (DefaultTableModel) product_table.getModel();
        model.setRowCount(0);
        
        Statement st = con.createStatement();
        ResultSet r1 = st.executeQuery("SELECT * FROM order_product, product WHERE idOrder=" + this.oid + " AND order_product.idProduct = product.idProduct");
        while (r1.next()) {
            String prod_name = r1.getString("name");
            String prod_id = r1.getString("order_product.idProduct");
            product_field.addItem(prod_id + ": " + prod_name);
            
            String qty_row = r1.getString("quantity");
            String stage_row = r1.getString("stage");
            model.addRow(new Object[]{prod_id+": "+prod_name, stage_row, qty_row});
        }
        r1.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        stage_field = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        quantity_field = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        product_table = new javax.swing.JTable();
        filter_button = new javax.swing.JButton();
        update_product_button = new javax.swing.JButton();
        delete_product_button = new javax.swing.JButton();
        product_field = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Product");

        jLabel2.setText("Stage");

        jLabel3.setText("Quantity");

        quantity_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantity_fieldActionPerformed(evt);
            }
        });

        product_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Stage", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        product_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(product_table);
        if (product_table.getColumnModel().getColumnCount() > 0) {
            product_table.getColumnModel().getColumn(0).setResizable(false);
            product_table.getColumnModel().getColumn(1).setResizable(false);
            product_table.getColumnModel().getColumn(2).setResizable(false);
        }

        filter_button.setText("Filter");
        filter_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_buttonActionPerformed(evt);
            }
        });

        update_product_button.setText("Update");
        update_product_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_product_buttonActionPerformed(evt);
            }
        });

        delete_product_button.setText("Delete");
        delete_product_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_product_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(product_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(stage_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(quantity_field, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(filter_button)))
                .addContainerGap(205, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(update_product_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete_product_button)
                .addGap(87, 87, 87))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(stage_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(product_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(quantity_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(filter_button)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update_product_button)
                    .addComponent(delete_product_button))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quantity_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantity_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantity_fieldActionPerformed

    private void filter_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_buttonActionPerformed
        try {
            // TODO add your handling code here:
            String prod_sql = "" + product_field.getSelectedItem().toString().split(": ")[0] + "";
            String sql;
            String stage_sql = "%" + stage_field.getSelectedItem().toString() + "%";
            if (stage_sql.equals("%ALL%"))
                stage_sql="%%";
            String qty_sql = "%" + quantity_field.getText() + "%";
            
            DefaultTableModel model = (DefaultTableModel) product_table.getModel();
            model.setRowCount(0);
            
            Statement st = con.createStatement();
            if(prod_sql.equals("ALL")){
                sql = String.format("SELECT * FROM order_product, product WHERE idOrder=%s AND stage LIKE '%s'"
                    + " AND quantity LIKE '%s' AND order_product.idProduct = product.idProduct", Integer.toString(this.oid), stage_sql, qty_sql);
            }else{
                sql = String.format("SELECT * FROM order_product, product WHERE idOrder=%s AND product.idProduct=%s AND stage LIKE '%s'"
                        + " AND quantity LIKE '%s' AND order_product.idProduct = product.idProduct", Integer.toString(this.oid), prod_sql, stage_sql, qty_sql);
            }
            System.out.println(sql);
            ResultSet r1 = st.executeQuery(sql);
            while (r1.next()) {
                String prod_name = r1.getString("name");
                String prod_id = r1.getString("order_product.idProduct");
                
                String qty_row = r1.getString("quantity");
                String stage_row = r1.getString("stage");
                model.addRow(new Object[]{prod_id+": "+prod_name, stage_row, qty_row});
            }
            r1.close();
        } catch (SQLException ex) {
            Logger.getLogger(DisplayOrderProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_filter_buttonActionPerformed

    private void update_product_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_product_buttonActionPerformed
        // TODO add your handling code here:
        int rowIndex = product_table.getSelectedRow();
        JFrame jf = new JFrame();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(jf, "Please Select an Entry To Perform This Operation");
        } else {
            try {
                AddOrder ao;
                int pid = Integer.parseInt(product_table.getValueAt(rowIndex, 0).toString().split(": ")[0]);
                String prodname = product_table.getValueAt(rowIndex, 0).toString().split(": ")[1];
                String stg = product_table.getValueAt(rowIndex, 1).toString();
                int q = Integer.parseInt(product_table.getValueAt(rowIndex, 2).toString());
                
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("SELECT order_name FROM orders WHERE idOrder=" + this.oid);
                String ordername = "";
                while (rs.next()) {
                    ordername = rs.getString("order_name");
                }
                ao = new AddOrder(con, 1, this.oid, pid, ordername, prodname, stg, q);
                ao.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(DisplayOrderProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_update_product_buttonActionPerformed

    private void delete_product_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_product_buttonActionPerformed
        // TODO add your handling code here:
        int rowIndex = product_table.getSelectedRow();
        JFrame jf = new JFrame();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(jf, "Please select an entry to perform this operation.");
        } else {
            try {
                int YesOrNo = JOptionPane.showConfirmDialog(null, "Do You Want to Delete This Product?", "Delete Product", JOptionPane.YES_NO_OPTION);
                if (YesOrNo == 0) {
                    try {
                        Statement st = con.createStatement();
                        int pid = Integer.parseInt(product_table.getValueAt(rowIndex, 0).toString().split(": ")[0]);
                        String delq = String.format("DELETE FROM order_product WHERE idOrder=%d AND idProduct=%d", this.oid, pid);
                        st.executeUpdate(delq);
                        JOptionPane.showMessageDialog(jf, "Deleted Successfully.");
                    } catch (SQLException ex) {
                        Logger.getLogger(DisplayOrderProduct.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(jf, "Something went wrong.");
                    }
                } else {
                    return;
                }
                this.setVisible(false);
                DisplayOrderProduct dp = new DisplayOrderProduct(con, this.oid);
                dp.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(DisplayOrderProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_delete_product_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayOrderProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayOrderProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayOrderProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayOrderProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayOrderProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete_product_button;
    private javax.swing.JButton filter_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> product_field;
    private javax.swing.JTable product_table;
    private javax.swing.JTextField quantity_field;
    private javax.swing.JComboBox<String> stage_field;
    private javax.swing.JButton update_product_button;
    // End of variables declaration//GEN-END:variables
}
