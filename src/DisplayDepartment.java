
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lenovo
 */
public class DisplayDepartment extends javax.swing.JFrame {

    private Connection con;
    HashMap<String, Integer> mang = new HashMap<>();
    HashMap<Integer, String> inv = new HashMap<>();
    String departmentList;

    /**
     * Creates new form DisplayDepartment
     */
    public DisplayDepartment() {
        initComponents();
    }
    
    DisplayDepartment(Connection con) throws SQLException {
        this.con = con;
        initComponents();
        
        managerField.addItem("All");
        mang.put("All", -2);
        
        managerField.addItem("None");
        mang.put("None", -1);
        
        Statement st1 = con.createStatement();
        ResultSet r = st1.executeQuery("SELECT * FROM EMPLOYEE");
        while(r.next()){
            managerField.addItem(r.getString("idEmployee") + ": " + r.getString("first_name")+" "+r.getString("last_name"));
            mang.put(r.getString("idEmployee") + ": " + r.getString("first_name")+" "+r.getString("last_name"), Integer.parseInt(r.getString("idEmployee")));
            inv.put(Integer.parseInt(r.getString("idEmployee")), r.getString("first_name")+" "+r.getString("last_name"));
        }
        AutoCompletion.enable(managerField);
        
        try (Statement st = con.createStatement()) {
            String query = "Select * from DEPARTMENT;";
            ResultSet rs = st.executeQuery(query);
            DefaultTableModel model = (DefaultTableModel)departmentTable.getModel();
            model.setRowCount(0);
            departmentList = "";
            while(rs.next()){
                String dept_id = rs.getString("idDepartment");
                String name = rs.getString("name");
                String sd = rs.getString("start_date");
                String location = rs.getString("location");
                String man_id = rs.getString("manager_id");
                model.addRow(new Object[]{dept_id, name, sd, location, man_id});
                departmentList = departmentList + ", " +  dept_id;
            }
            rs.close();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        departmentTable = new javax.swing.JTable();
        dateLabel = new javax.swing.JLabel();
        dateField = new org.jdesktop.swingx.JXDatePicker();
        filterLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        locationField = new javax.swing.JTextField();
        managerLabel = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        delentry = new javax.swing.JButton();
        updentry = new javax.swing.JButton();
        managerField = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        departmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Department ID", "Name", "Start Date", "Location", "Manager ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        departmentTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(departmentTable);

        dateLabel.setText("Starting Date");

        filterLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        filterLabel.setText("Filter");
        filterLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        nameLabel.setText("Name");

        locationLabel.setText("Location");

        managerLabel.setText("Manager");

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        delete.setText("DELETE ALL");
        delete.setToolTipText("");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        delentry.setText("Delete Selected Entry");
        delentry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delentryActionPerformed(evt);
            }
        });

        updentry.setText("Update Selected Entry");
        updentry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updentryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nameField)
                            .addComponent(dateField, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(locationLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(managerLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(locationField)
                            .addComponent(managerField, 0, 177, Short.MAX_VALUE))
                        .addGap(152, 152, 152))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updentry, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delentry, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(filterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(locationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(managerLabel)
                            .addComponent(managerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateLabel)
                            .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delentry, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updentry, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try {
            int YesOrNo = JOptionPane.showConfirmDialog(null, "Do You Want to Delete All Departments?", "Delete Departments", JOptionPane.YES_NO_OPTION);
            if(YesOrNo == 0){
                try {
                    Statement delq = con.createStatement();
                    String query = String.format("DELETE from DEPARTMENT WHERE idDepartment IN (" + departmentList.substring(2) + ");");
                    System.out.println(query);
                    delq.executeUpdate(query);
                    JFrame f = new JFrame();
                    JOptionPane.showMessageDialog(f, "Deleted Successfully");
                } catch (SQLException ex) {
                    Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                    JFrame f = new JFrame();
                    JOptionPane.showMessageDialog(f, "Something went Wrong");
                }
            }

            try (Statement newtable = con.createStatement()) {
                String query = "Select * from department;";
                ResultSet rs = newtable.executeQuery(query);
                DefaultTableModel model = (DefaultTableModel)departmentTable.getModel();
                model.setRowCount(0);
                departmentList = "";
                while(rs.next()){
                    String dept_id = rs.getString("idDepartment");
                    String name = rs.getString("name");
                    String sd = rs.getString("start_date");
                    String location = rs.getString("location");
                    String man_id = rs.getString("manager_id");
                    model.addRow(new Object[]{dept_id, name, sd, location, man_id});
                    departmentList = departmentList + ", " +  dept_id;
                }
                rs.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void delentryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delentryActionPerformed
        int rowIndex =  departmentTable.getSelectedRow();
        JFrame f = new JFrame();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(f, "Please Select an Entry To Perform This Operation");
        } else {
            try {
                int YesOrNo = JOptionPane.showConfirmDialog(null, "Do You Want to Delete This Department?", "Delete Department", JOptionPane.YES_NO_OPTION);
                if(YesOrNo == 0){
                    try {
                        Statement delq = con.createStatement();
                        int d = Integer.parseInt(departmentTable.getValueAt(rowIndex, 0).toString());
                        String query = String.format("DELETE from DEPARTMENT WHERE idDepartment = '" + d + "';");
                        System.out.println(query);
                        delq.executeUpdate(query);
                        JOptionPane.showMessageDialog(f, "Deleted Successfully");
                    } catch (SQLException ex) {
                        Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(f, "Something went Wrong");
                    }
                }

                try (Statement newtable = con.createStatement()) {
                    String query = "Select * from department;";
                    ResultSet rs = newtable.executeQuery(query);
                    DefaultTableModel model = (DefaultTableModel)departmentTable.getModel();
                    model.setRowCount(0);
                    departmentList = "";
                    while(rs.next()){
                        String dept_id = rs.getString("idDepartment");
                        String name = rs.getString("name");
                        String sd = rs.getString("start_date");
                        String location = rs.getString("location");
                        String man_id = rs.getString("manager_id");
                        model.addRow(new Object[]{dept_id, name, sd, location, man_id});
                        departmentList = departmentList + ", " +  dept_id;
                    }
                    rs.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(f, "Something went wrong while Deleting Entry");
            }
        }
    }//GEN-LAST:event_delentryActionPerformed

    private void updentryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updentryActionPerformed
        // TODO add your handling code here:
        int rowIndex =  departmentTable.getSelectedRow();
        JFrame f = new JFrame();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(f, "Please Select an Entry To Perform This Operation");
        } else {
            AddDepartment ad;
            String name,loc,sd,mngr;
            try {
                int did = Integer.parseInt(departmentTable.getValueAt(rowIndex, 0).toString());
                name = departmentTable.getValueAt(rowIndex, 1).toString();
                sd = departmentTable.getValueAt(rowIndex, 2).toString();
                loc = departmentTable.getValueAt(rowIndex, 3).toString();
                try{
                    mngr = inv.get(Integer.parseInt(departmentTable.getValueAt(rowIndex, 4).toString()));
                } catch (NullPointerException e) {
                    mngr = "None";
                }
                ad = new AddDepartment(con, 1, did, name, loc, sd, mngr);
                ad.setVisible(true);
            } catch (SQLException | ParseException ex) {
                Logger.getLogger(DisplayEmployees.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(f, "Something Went Wrong");
            }
        }
    }//GEN-LAST:event_updentryActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:
        try {
            SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
            String sd, mid;
            String name = "%"+nameField.getText()+"%";
            try {
                sd = "%"+ft.format(dateField.getDate())+"%";
            }catch (NullPointerException e) {
                sd = "%%";
            }
            String loc = "%"+locationField.getText()+"%";
            String mf = managerField.getSelectedItem().toString();

            Statement st = con.createStatement();
            String query;
            if(mf.equals("None")){
                query = String.format("SELECT * from Department WHERE name LIKE '%s' AND location LIKE '%s' AND "
                    + "start_date LIKE '%s' AND manager_id IS NULL;", name, loc, sd);
            }
            else if(mf.equals("All")){
                query = String.format("SELECT * from Department WHERE name LIKE '%s' AND location LIKE '%s' AND "
                    + "start_date LIKE '%s'", name, loc, sd);
            }
            else{
                mid = "%"+mang.get(managerField.getSelectedItem().toString())+"%";
                query = String.format("SELECT * from Department WHERE name LIKE '%s' AND location LIKE '%s' AND "
                    + "start_date LIKE '%s' AND manager_id LIKE '%s';", name, loc, sd, mid);
            }
            System.out.println(query);
            ResultSet rs = st.executeQuery(query);
            DefaultTableModel model = (DefaultTableModel)departmentTable.getModel();
            model.setRowCount(0);
            departmentList = "";
            while(rs.next()){
                String dept_id = rs.getString("idDepartment");
                String nam = rs.getString("name");
                String sdt = rs.getString("start_date");
                String location = rs.getString("location");
                String man_id = rs.getString("manager_id");
                model.addRow(new Object[]{dept_id, nam, sdt, location, man_id});
                departmentList = departmentList + ", " +  dept_id;
            }
            rs.close();
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(DisplayCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "Something went Wrong");
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayDepartment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayDepartment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayDepartment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayDepartment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayDepartment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker dateField;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton delentry;
    private javax.swing.JButton delete;
    private javax.swing.JTable departmentTable;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField locationField;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JComboBox<String> managerField;
    private javax.swing.JLabel managerLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton updentry;
    // End of variables declaration//GEN-END:variables
}
